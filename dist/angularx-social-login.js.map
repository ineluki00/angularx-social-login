{"version":3,"file":"angularx-social-login.js","sources":["../out-tsc/lib/lib/auth.service.ts","../out-tsc/lib/lib/sociallogin.module.ts","../out-tsc/lib/lib/entities/user.ts","../out-tsc/lib/lib/entities/base-login-provider.ts","../out-tsc/lib/lib/providers/google-login-provider.ts","../out-tsc/lib/lib/providers/facebook-login-provider.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, BehaviorSubject, ReplaySubject } from 'rxjs';\r\n\r\nimport { LoginProvider } from './entities/login-provider';\r\nimport { SocialUser } from './entities/user';\r\n\r\nexport interface AuthServiceConfigItem {\r\n  id: string;\r\n  provider: LoginProvider;\r\n  /**\r\n   * This field allows to load login providers SDKs lazily.\r\n   * Lazy loading is activated if it's true and vice versa.\r\n   */\r\n  lazyLoad?: boolean;\r\n}\r\n\r\nexport interface LoginOpt {\r\n  /**\r\n   * Facebook FB.login options: https://developers.facebook.com/docs/reference/javascript/FB.login/v2.11.\r\n   */\r\n  auth_type?: string; // Optional key, only supports one value: rerequest. Use this when re-requesting a declined permission.\r\n  scope?: string; // Comma separated list of extended permissions\r\n  return_scopes?: boolean; // When true, the granted scopes will be returned in a comma-separated list.\r\n  enable_profile_selector?: boolean; // When true, prompt the user to grant permission for one or more Pages.\r\n  profile_selector_ids?: string; // Comma separated list of IDs to display in the profile selector\r\n  /**\r\n   * Google gapi.auth2.ClientConfig: \\\r\n   * https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2clientconfig.\r\n   */\r\n  /* Required. The app's client ID, found and created in the Google Developers Console.*/\r\n  client_id?: string;\r\n  /* The domains for which to create sign-in cookies. Either a URI,\r\n  single_host_origin, or none. Defaults to single_host_origin if unspecified. */\r\n  cookie_policy?: string;\r\n  /* Fetch users' basic profile information when they sign in. Adds 'profile',\r\n  'email' and 'openid' to the requested scopes. True if unspecified. */\r\n  fetch_basic_profile?: boolean;\r\n  /* The G Suite domain to which users must belong to sign in.\r\n  This is susceptible to modification by clients, so be sure to verify\r\n  the hosted domain property of the returned user.\r\n  Use GoogleUser.getHostedDomain() on the client, and the hd claim in\r\n  the ID Token on the server to verify the domain is what you expected. */\r\n  hosted_domain?: string;\r\n  /* Used only for OpenID 2.0 client migration. Set to the value\r\n  of the realm that you are currently using for OpenID 2.0,\r\n  as described in OpenID 2.0 (Migration). */\r\n  openid_realm?: string;\r\n  /* The UX mode to use for the sign-in flow. By default, it will open the consent flow in a popup. Valid values are popup and redirect. */\r\n  ux_mode?: string;\r\n  /* If using ux_mode='redirect', this parameter allows you to override\r\n  the default redirect_uri that will be used at the end of the consent flow.\r\n  The default redirect_uri is the current URL stripped of query parameters\r\n  and hash fragment. */\r\n  redirect_uri?: string;\r\n  /* Get permission from the user to access the specified scopes offline,\r\n   * If using offline_access=true, GoogleAuth.grantOfflineAccess() will be use instead of GoogleAuth.signIn()\r\n   */\r\n  offline_access?: boolean;\r\n  /*\r\n   A space-delimited list of string values that specifies whether the authorization server prompts the user for reauthentication\r\n   and consent. The possible values are:\r\n    none\r\n      The authorization server does not display any authentication or user consent screens; it will return an error if the user is not\r\n      already authenticated and has not pre-configured consent for the requested scopes. You can use none to check for existing\r\n      authentication and/or consent.\r\n    consent\r\n      The authorization server prompts the user for consent before returning information to the client.\r\n    select_account\r\n      The authorization server prompts the user to select a user account. This allows a user who has multiple accounts at the authorization\r\n      server to select amongst the multiple accounts that they may have current sessions for.\r\n\r\n   If no value is specified and the user has not previously authorized access, then the user is shown a consent screen.\r\n  */\r\n  prompt?: string;\r\n  /*\r\n    The email, or User ID, of a user to pre-select in the sign-in flow. \r\n    This is susceptible to modification by the user, unless prompt: \"none\" is used.\r\n  */\r\n  login_hint?: string;\r\n\r\n}\r\n\r\nexport class AuthServiceConfig {\r\n  lazyLoad = false;\r\n  providers: Map<string, LoginProvider> = new Map<string, LoginProvider>();\r\n\r\n  constructor(providers: AuthServiceConfigItem[]) {\r\n    for (let i = 0; i < providers.length; i++) {\r\n      let element = providers[i];\r\n      this.providers.set(element.id, element.provider);\r\n      this.lazyLoad = this.lazyLoad || element.lazyLoad;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n  private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\r\n  private static readonly ERR_NOT_LOGGED_IN = 'Not logged in';\r\n\r\n  private providers: Map<string, LoginProvider>;\r\n\r\n  private _user: SocialUser = null;\r\n  private _authState: ReplaySubject<SocialUser> = new ReplaySubject(1);\r\n  private _readyState: BehaviorSubject<string[]> = new BehaviorSubject([]);\r\n\r\n  private initialized = false;\r\n\r\n  get authState(): Observable<SocialUser> {\r\n    return this._authState.asObservable();\r\n  }\r\n  /** Provides an array of provider ID's as they become ready */\r\n  get readyState(): Observable<string[]> {\r\n    return this._readyState.asObservable();\r\n  }\r\n\r\n  constructor(config: AuthServiceConfig) {\r\n    this.providers = config.providers;\r\n\r\n    if (!config.lazyLoad) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  private initialize() {\r\n    this.initialized = true;\r\n    this.providers.forEach((provider: LoginProvider, key: string) => {\r\n      provider.initialize().then(() => {\r\n        let readyProviders = this._readyState.getValue();\r\n        readyProviders.push(key);\r\n        this._readyState.next(readyProviders);\r\n\r\n        provider.getLoginStatus().then((user) => {\r\n          user.provider = key;\r\n\r\n          this._user = user;\r\n          this._authState.next(user);\r\n        }).catch((err) => {\r\n          this._authState.next(null);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  signIn(providerId: string, opt?: LoginOpt): Promise<SocialUser> {\r\n    if (!this.initialized) {\r\n      this.initialize();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      let providerObject = this.providers.get(providerId);\r\n      if (providerObject) {\r\n        providerObject.signIn(opt).then((user: SocialUser) => {\r\n          user.provider = providerId;\r\n          resolve(user);\r\n\r\n          this._user = user;\r\n          this._authState.next(user);\r\n        }).catch(err => {\r\n          reject(err);\r\n        });\r\n      } else {\r\n        reject(AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n      }\r\n    });\r\n  }\r\n\r\n  signOut(revoke: boolean = false): Promise<any> {\r\n    if (!this.initialized) {\r\n      this.initialize();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (!this._user) {\r\n        reject(AuthService.ERR_NOT_LOGGED_IN);\r\n      } else {\r\n        let providerId = this._user.provider;\r\n        let providerObject = this.providers.get(providerId);\r\n        if (providerObject) {\r\n          providerObject.signOut(revoke).then(() => {\r\n            resolve();\r\n\r\n            this._user = null;\r\n            this._authState.next(null);\r\n          }).catch((err) => {\r\n            reject(err);\r\n          });\r\n        } else {\r\n          reject(AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthService, AuthServiceConfig } from './auth.service';\r\n\r\nexport function configFactory(config: AuthServiceConfig) {\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    AuthService\r\n  ]\r\n})\r\nexport class SocialLoginModule {\r\n\r\n  public static initialize(config: AuthServiceConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: SocialLoginModule,\r\n      providers: [\r\n        AuthService,\r\n        {\r\n          provide: AuthServiceConfig,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n}\r\n","export class SocialUser {\r\n  provider: string;\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  photoUrl: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  authToken: string;\r\n  idToken: string; // Reference https://developers.google.com/identity/sign-in/web/backend-auth\r\n  authorizationCode: string; // Reference https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions\r\n\r\n  /**\r\n   * Contains the entire object returned from the Facebook API based on the fields you requested.\r\n   * Only available for the Facebook provider.\r\n   * Refer to the Graph API for details: https://developers.facebook.com/docs/graph-api\r\n   */\r\n  facebook?: any;\r\n\r\n  /**\r\n   * Contains the entire object returned from the Linked In API based on the fields you requested.\r\n   * Only available for the Linked In provider.\r\n   * Refer to the Linked In docs: https://developer.linkedin.com/docs/fields\r\n   */\r\n  linkedIn?: any;\r\n}\r\n","import { LoginProvider } from './login-provider';\r\nimport { SocialUser } from './user';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport abstract class BaseLoginProvider implements LoginProvider {\r\n\r\n    protected _readyState: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    constructor() { }\r\n\r\n    protected onReady(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this._readyState.subscribe((isReady: boolean) => {\r\n                if (isReady) {\r\n                    resolve();\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    abstract initialize(): Promise<void>;\r\n    abstract getLoginStatus(): Promise<SocialUser>;\r\n    abstract signIn(): Promise<SocialUser>;\r\n    abstract signOut(revoke?: boolean): Promise<any>;\r\n\r\n    loadScript(id: string, src: string, onload: any, async = true, inner_text_content = ''): void {\r\n        // get document if platform is only browser\r\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            let signInJS = document.createElement('script');\r\n            signInJS.async = async;\r\n            signInJS.src = src;\r\n            signInJS.onload = onload;\r\n            /*\r\n            if (inner_text_content) // LinkedIn\r\n                signInJS.text = inner_text_content;\r\n            */\r\n            document.head.appendChild(signInJS);\r\n        }\r\n    }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/user';\r\nimport { LoginOpt } from '../auth.service';\r\n\r\ndeclare let gapi: any;\r\n\r\nexport class GoogleLoginProvider extends BaseLoginProvider {\r\n\r\n    public static readonly PROVIDER_ID: string = 'GOOGLE';\r\n\r\n    protected auth2: any;\r\n\r\n    constructor(private clientId: string, private opt: LoginOpt = { scope: 'email' }) { super(); }\r\n\r\n    initialize(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(GoogleLoginProvider.PROVIDER_ID,\r\n                'https://apis.google.com/js/platform.js',\r\n                () => {\r\n                    gapi.load('auth2', () => {\r\n                        this.auth2 = gapi.auth2.init({\r\n                            ...this.opt,\r\n                            client_id: this.clientId\r\n                        });\r\n\r\n                        this.auth2.then(() => {\r\n                            this._readyState.next(true);\r\n                            resolve();\r\n                        }).catch((err: any) => {\r\n                            reject(err);\r\n                        });\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    getLoginStatus(): Promise<SocialUser> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onReady().then(() => {\r\n                if (this.auth2.isSignedIn.get()) {\r\n                    let user: SocialUser = new SocialUser();\r\n                    // let profile = this.auth2.currentUser.get().getBasicProfile();\r\n                    // let token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\r\n                    // let backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\r\n\r\n                    // user.id = profile.getId();\r\n                    // user.name = profile.getName();\r\n                    // user.email = profile.getEmail();\r\n                    // user.photoUrl = profile.getImageUrl();\r\n                    // user.firstName = profile.getGivenName();\r\n                    // user.lastName = profile.getFamilyName();\r\n                    // user.authToken = token;\r\n                    // user.idToken = backendToken;\r\n                    resolve(user);\r\n                } else {\r\n                    reject('No user is currently logged in.');\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    signIn(opt?: LoginOpt): Promise<SocialUser> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onReady().then(() => {\r\n                const offlineAccess: boolean = (opt && opt.offline_access) || (this.opt && this.opt.offline_access);\r\n                let promise = !offlineAccess ? this.auth2.signIn(opt) : this.auth2.grantOfflineAccess(opt);\r\n\r\n                promise.then((response: any) => {\r\n                    let user: SocialUser = new SocialUser();\r\n                    if (response && response.code) {\r\n                        user.authorizationCode = response.code;\r\n                    } else {\r\n                        let profile = this.auth2.currentUser.get().getBasicProfile();\r\n                        let token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\r\n                        let backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\r\n\r\n                        user.id = profile.getId();\r\n                        user.name = profile.getName();\r\n                        user.email = profile.getEmail();\r\n                        user.photoUrl = profile.getImageUrl();\r\n                        user.firstName = profile.getGivenName();\r\n                        user.lastName = profile.getFamilyName();\r\n                        user.authToken = token;\r\n                        user.idToken = backendToken;\r\n                    }\r\n\r\n                    resolve(user);\r\n                }, (closed: any) => {\r\n                    reject('User cancelled login or did not fully authorize.');\r\n                }).catch((err: any) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    signOut(revoke?: boolean): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onReady().then(() => {\r\n                let signOutPromise;\r\n                if (revoke) {\r\n                    signOutPromise = this.auth2.disconnect();\r\n                } else {\r\n                    signOutPromise = this.auth2.signOut();\r\n                }\r\n\r\n                signOutPromise.then((err: any) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }).catch((err: any) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/user';\r\nimport { LoginOpt } from '../auth.service';\r\n\r\ndeclare let FB: any;\r\n\r\nexport class FacebookLoginProvider extends BaseLoginProvider {\r\n\r\n    public static readonly PROVIDER_ID: string = 'FACEBOOK';\r\n\r\n    constructor(\r\n        private clientId: string,\r\n        private opt: LoginOpt = { scope: 'email,public_profile' },\r\n        private locale: string = 'en_US',\r\n        private fields: string = 'name,email,picture,first_name,last_name',\r\n        private version: string = 'v4.0'\r\n    ) { super(); }\r\n\r\n    initialize(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(FacebookLoginProvider.PROVIDER_ID,\r\n                `//connect.facebook.net/${this.locale}/sdk.js`,\r\n                () => {\r\n                    FB.init({\r\n                        appId: this.clientId,\r\n                        autoLogAppEvents: true,\r\n                        cookie: true,\r\n                        xfbml: true,\r\n                        version: this.version\r\n                    });\r\n                    // FB.AppEvents.logPageView(); #FIX for #18\r\n\r\n                    this._readyState.next(true);\r\n                    resolve();\r\n                });\r\n        });\r\n    }\r\n\r\n    getLoginStatus(): Promise<SocialUser> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onReady().then(() => {\r\n                FB.getLoginStatus((response: any) => {\r\n                    if (response.status === 'connected') {\r\n                        let authResponse = response.authResponse;\r\n                        FB.api(`/me?fields=${this.fields}`, (fbUser: any) => {\r\n                            let user: SocialUser = new SocialUser();\r\n\r\n                            user.id = fbUser.id;\r\n                            user.name = fbUser.name;\r\n                            user.email = fbUser.email;\r\n                            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\r\n                            user.firstName = fbUser.first_name;\r\n                            user.lastName = fbUser.last_name;\r\n                            user.authToken = authResponse.accessToken;\r\n\r\n                            user.facebook = fbUser;\r\n\r\n                            resolve(user);\r\n                        });\r\n                    } else {\r\n                        reject('No user is currently logged in.');\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    signIn(opt?: LoginOpt): Promise<SocialUser> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onReady().then(() => {\r\n                FB.login((response: any) => {\r\n                    if (response.authResponse) {\r\n                        let authResponse = response.authResponse;\r\n                        FB.api(`/me?fields=${this.fields}`, (fbUser: any) => {\r\n                            let user: SocialUser = new SocialUser();\r\n\r\n                            user.id = fbUser.id;\r\n                            user.name = fbUser.name;\r\n                            user.email = fbUser.email;\r\n                            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\r\n                            user.firstName = fbUser.first_name;\r\n                            user.lastName = fbUser.last_name;\r\n                            user.authToken = authResponse.accessToken;\r\n\r\n                            user.facebook = fbUser;\r\n\r\n                            resolve(user);\r\n                        });\r\n                    } else {\r\n                        reject('User cancelled login or did not fully authorize.');\r\n                    }\r\n                }, this.opt);\r\n            });\r\n        });\r\n    }\r\n\r\n    signOut(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onReady().then(() => {\r\n                FB.logout((response: any) => {\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"],"names":[],"mappings":"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"}