var AuthService_1;
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
export class AuthServiceConfig {
    constructor(providers) {
        this.lazyLoad = false;
        this.providers = new Map();
        for (let i = 0; i < providers.length; i++) {
            let element = providers[i];
            this.providers.set(element.id, element.provider);
            this.lazyLoad = this.lazyLoad || element.lazyLoad;
        }
    }
}
let AuthService = AuthService_1 = class AuthService {
    constructor(config) {
        this._user = null;
        this._authState = new ReplaySubject(1);
        this._readyState = new BehaviorSubject([]);
        this.initialized = false;
        this.providers = config.providers;
        if (!config.lazyLoad) {
            this.initialize();
        }
    }
    get authState() {
        return this._authState.asObservable();
    }
    /** Provides an array of provider ID's as they become ready */
    get readyState() {
        return this._readyState.asObservable();
    }
    initialize() {
        this.initialized = true;
        this.providers.forEach((provider, key) => {
            provider.initialize().then(() => {
                let readyProviders = this._readyState.getValue();
                readyProviders.push(key);
                this._readyState.next(readyProviders);
                provider.getLoginStatus().then((user) => {
                    user.provider = key;
                    this._user = user;
                    this._authState.next(user);
                }).catch((err) => {
                    this._authState.next(null);
                });
            });
        });
    }
    signIn(providerId, opt) {
        if (!this.initialized) {
            this.initialize();
        }
        return new Promise((resolve, reject) => {
            let providerObject = this.providers.get(providerId);
            if (providerObject) {
                providerObject.signIn(opt).then((user) => {
                    user.provider = providerId;
                    resolve(user);
                    this._user = user;
                    this._authState.next(user);
                }).catch(err => {
                    reject(err);
                });
            }
            else {
                reject(AuthService_1.ERR_LOGIN_PROVIDER_NOT_FOUND);
            }
        });
    }
    signOut(revoke = false) {
        if (!this.initialized) {
            this.initialize();
        }
        return new Promise((resolve, reject) => {
            if (!this._user) {
                reject(AuthService_1.ERR_NOT_LOGGED_IN);
            }
            else {
                let providerId = this._user.provider;
                let providerObject = this.providers.get(providerId);
                if (providerObject) {
                    providerObject.signOut(revoke).then(() => {
                        resolve();
                        this._user = null;
                        this._authState.next(null);
                    }).catch((err) => {
                        reject(err);
                    });
                }
                else {
                    reject(AuthService_1.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    }
};
AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
AuthService.ERR_NOT_LOGGED_IN = 'Not logged in';
AuthService.ctorParameters = () => [
    { type: AuthServiceConfig }
];
AuthService = AuthService_1 = tslib_1.__decorate([
    Injectable()
], AuthService);
export { AuthService };
//# sourceMappingURL=data:application/json;base64,